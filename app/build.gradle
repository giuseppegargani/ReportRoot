plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.example.reportroot"
        minSdk 24
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    task saluti() {
        doLast {
            println("saluti !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        }
        //test.finalizedBy(saluti)
        //mustRunAfter('ciao')
    }

    task ciao() {
        doLast {
            println("Ciao Mondo e...")
        }
        //finalizedBy(saluti)
    }

    /*task.withType('connectedAndroidTest') {
        //finalizedBy('saluti')
        println("eccomi")
    }*/
    /*def taskX = tasks.register('taskX') {
        doLast {
            println 'taskX'
        }
    }
    def taskY = tasks.register('taskY') {
        doLast {
            println 'taskY!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
        }
    }
    def taskZ = tasks.register('taskZ') {
        doLast {
            println 'taskZ'
        }
    }*/
    //interessante!!!!!!!!!!!!!!!!!!!!!!!
    /*taskX.configure { dependsOn(taskY) }
    taskY.configure { dependsOn(taskZ) }
    taskZ.configure { shouldRunAfter(taskX) }
     */
    //test.configure { finalizedBy(taskY) }

    /*task taskX( mustRunAfter('connectedAndroidTest')  ) {

       doLast {
           println(" dopo il test strumentale------------------------------")
       }
    }*/

    testVariants.all { variant ->
        variant.connectedInstrumentTest.doLast {
            println "This will be executed right after our connectedInstrumentTest!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
            println "This will be executed right after our connectedInstrumentTest!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
            println "This will be executed right after our connectedInstrumentTest!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
            println "This will be executed right after our connectedInstrumentTest!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
            println "This will be executed right after our connectedInstrumentTest!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
            println "The name of the test type: $connectedInstrumentTest.name"
            println "The type of test $connectedInstrumentTest.class"
        }
        connectedAndroidTest.finalizedBy(':addedTask:customInstr')
        assembleDebugAndroidTest.finalizedBy(':addedTask:customInstr')
    }

    //VERIFICARE CHE TRASFERISCA PER DIVERSI COMANDI TEST STRUMENTALE, CON IF CONDIZIONALE (NON ERRORE) E SENZA ANDROIDJUNITRUNNER
    /*task customInstr (type: Exec) {

        //esegue il comando
        //commandLine 'adb', 'shell', 'am', 'instrument', '-w', '-e', 'class', 'com.example.tests_vari.ExampleInstrumentedTest', 'com.example.tests_vari.test/androidx.test.runner.AndroidJUnitRunner'//, '&&', 'adb', 'shell', 'cat', 'sdcard/android/data/com.example.tests_vari/files/giuseppe.txt'
        //commandLine 'adb shell am instrument -w -e class com.example.tests_vari.ExampleInstrumentedTest com.example.tests_vari.test/androidx.test.runner.AndroidJUnitRunner && adb pull sdcard/android/data/com.example.tests_vari/files/giuseppe.txt'
        //commandLine 'adb', 'pull', 'sdcard/android/data/com.example.reportroot/files/JsonTestReport.json', '../'
        commandLine 'adb', 'devices'
        doLast{
            println("LANCIATA TASK!!!!!!!!!!!!!")
        }
        doLast {
            exec {
                //copia il file da emulatore a directory locale
                commandLine 'adb', 'pull', 'sdcard/android/data/com.example.reportroot/files/JsonTestReport.json', '../'

            }
            //e legge per verifica
            String fileContents = new File('JsonTestReport.json').text
            println(fileContents)
        }
    }*/


    /*if (tasks.findByName("ciao")) {
        doLast{
            println("ecco!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        }
        //tasks.findByName("test").finalizedBy ciao
    }*/

    /*tasks.addRule("Pattern: test<ID>") { String taskName ->
        if (taskName.startsWith("test")) {
            task(taskName) {
                doLast {
                    println "testing: " + (taskName - 'test')
                    //test
                }
            }
        }
    }

    tasks.register('testeprint') {
        doLast {
            println("eseguito test!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        }
        dependsOn app:connectedAndroidTest
    }*/

    /*ciao.configure {
        dependsOn(saluti)
    }*/

    //si puo' mettere vuoto e si puo' aggiungere successivamente altri
    /*ciao.configure {
        doLast{
            println("eccomi")
        }
    }
    ciao.configure {
        doLast {
            println("ed ancora un altro doLast")
        }
    }*/
    /*ConnectedAndroidTest.configure {
        doLast {
            println("eccomi")
        }
    }*/
    //    test.finalizedBy(ciao)
    /*tasks.named('app:test'){
        it.finalizedBy(saluti)
    }*/
    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    /*tasks.withType(Test) {
        doLast {
            println("ECCOMIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII")
        }
    }*/
    /*project.getTasks().withType(AndroidTest) {
        doLast {
            println("ANCORA!!!!!!!!")
        }
    }*/


    //test.finalizedBy(saluti)

    
    tasks.register('infoTasks') {
        doLast{
            println tasks.getByPath(':app:ciao').path
            println tasks.getByPath(':app:connectedAndroidTest').path
            println project.ciao.name
            println project.test.path

        }
        //espressione condizionale all'interno di una task
        /*if (tasks.findByName("connectedAndroidTest")) {
            doLast{
                println("TROVATA!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
            }
            //tasks.findByName("test").finalizedBy ciao
        } else {
            doLast{
                println("CANNOT FIND!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
            }
        }*/
    }
    /*tasks.findByName("connectedAndroidTest") {
        doLast {
            println("ECCOMIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII")
        }
    }*/

    /*tasks.named(':app:connectedAndroidTest') {
        doLast{
            println("ECCOMIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII")
        }
    }*/


    /*('test') {
        dependsOn tasks.withType(ciao)
    }*/

    //condizionale
    //tasks.named('ConnectedAndroidTest').doLast { println("eccomi")}

    /*tasks.withType(ConnectedAndroidTest) {
        doLast {
            println("ECCOMIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII")
        }
    }*/

    /*tasks.getByPath(':app:connectedAndroidTest') {
        doLast {
            println("ECCOMIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII")
        }
    }*/

    /*project.getTasks().getByPath("connectedAndroidTest") {
        doLast {
            println("ECCOMIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII")
        }
    }*/

   /*findByPath(':app:connectedAndroidTest').doLast {
       println("ECCOMIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII")
   }*/
    //ciao.dependsOn (connectedAndroidTest)

}


dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    //per stampa report
    implementation 'com.github.giuseppegargani:JsonReport:0.0.1'

    //local library
    implementation project(':addedTask')
}